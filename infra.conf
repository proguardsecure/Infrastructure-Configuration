## Infrastructure & Configuration

### infrastructure/configs/siem_rules.json
```json
{
  "siem_rules": {
    "rule_set_version": "2025.08.12",
    "updated_by": "marcus.rodriguez@secureguardpro.com",
    "rules": [
      {
        "rule_id": "SGP-001",
        "name": "Multiple Failed Login Attempts",
        "severity": "Medium",
        "condition": "failed_login_count > 5 AND time_window < 300s",
        "action": "alert_and_lock_account",
        "owner": "j.wilson@secureguardpro.com"
      },
      {
        "rule_id": "SGP-002",
        "name": "Unusual Outbound Network Traffic",
        "severity": "High",
        "condition": "outbound_bytes > 100MB AND destination NOT in whitelist",
        "action": "block_and_investigate",
        "owner": "c.taylor@secureguardpro.com"
      },
      {
        "rule_id": "SGP-003",
        "name": "Privilege Escalation Attempt",
        "severity": "Critical",
        "condition": "process_creation AND parent_process = 'cmd.exe' AND child_process CONTAINS 'runas'",
        "action": "immediate_isolation",
        "owner": "d.murphy@secureguardpro.com"
      },
      {
        "rule_id": "SGP-004",
        "name": "Malware Hash Detection",
        "severity": "Critical",
        "condition": "file_hash IN known_malware_hashes",
        "action": "quarantine_and_alert",
        "owner": "l.zhang@secureguardpro.com"
      },
      {
        "rule_id": "SGP-005",
        "name": "Suspicious PowerShell Activity",
        "severity": "High",
        "condition": "process = 'powershell.exe' AND command_line CONTAINS ('-enc' OR 'IEX' OR 'downloadstring')",
        "action": "block_and_investigate",
        "owner": "p.patel@secureguardpro.com"
      }
    ]
  }
}
```

### infrastructure/scripts/automated_backup.py
#!/usr/bin/env python3
"""
Automated Security Data Backup System
SecureGuardPro Infrastructure Team
Author: Thomas Anderson (t.anderson@secureguardpro.com)
"""

import os
import shutil
import datetime
import logging
import subprocess
import hashlib

class SecurityBackup:
    def __init__(self):
        self.backup_root = "/secure_backups/"
        self.retention_days = 90
        self.logger = self._setup_logging()
        
    def _setup_logging(self):
        logging.basicConfig(
            filename='/var/log/secureguard/backup.log',
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        return logging.getLogger(__name__)
    
    def backup_siem_data(self):
        """Backup SIEM logs and configurations"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{self.backup_root}/siem_backup_{timestamp}"
        
        try:
            os.makedirs(backup_path, exist_ok=True)
            
            # Backup configurations
            shutil.copy2("/etc/siem/config.xml", backup_path)
            shutil.copytree("/etc/siem/rules/", f"{backup_path}/rules/")
            
            # Backup recent logs
            subprocess.run([
                "tar", "-czf", f"{backup_path}/logs.tar.gz",
                "/var/log/siem/", "--newer-mtime", "7 days ago"
            ])
            
            self.logger.info(f"SIEM backup completed: {backup_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"SIEM backup failed: {e}")
            return False
    
    def backup_threat_intelligence(self):
        """Backup threat intelligence data"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{self.backup_root}/threat_intel_{timestamp}"
        
        try:
            os.makedirs(backup_path, exist_ok=True)
            
            # Backup IOC databases
            shutil.copy2("/opt/threat_intel/iocs.db", backup_path)
            shutil.copytree("/opt/threat_intel/yara_rules/", f"{backup_path}/yara_rules/")
            
            self.logger.info(f"Threat intelligence backup completed: {backup_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"Threat intelligence backup failed: {e}")
            return False
    
    def verify_backup_integrity(self, backup_path):
        """Verify backup integrity using checksums"""
        checksum_file = f"{backup_path}/checksums.sha256"
        
        try:
            with open(checksum_file, 'w') as f:
                for root, dirs, files in os.walk(backup_path):
                    for file in files:
                        if file != "checksums.sha256":
                            file_path = os.path.join(root, file)
                            hash_sha256 = hashlib.sha256()
                            with open(file_path, "rb") as bf:
                                for chunk in iter(lambda: bf.read(4096), b""):
                                    hash_sha256.update(chunk)
                            f.write(f"{hash_sha256.hexdigest()}  {file_path}\n")
            
            self.logger.info(f"Backup integrity verification completed: {checksum_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"Backup verification failed: {e}")
            return False

if __name__ == "__main__":
    backup_system = SecurityBackup()
    backup_system.backup_siem_data()
    backup_system.backup_threat_intelligence()
```

### infrastructure/monitoring/network_monitoring.yaml
```yaml
# Network Security Monitoring Configuration
# SecureGuardPro Infrastructure
# Owner: Christopher Taylor (c.taylor@secureguardpro.com)
# Last Updated: 2025-08-12

network_segments:
  dmz:
    subnet: "10.1.0.0/24"
    monitoring_level: "high"
    allowed_protocols: ["HTTP", "HTTPS", "SSH"]
    
  internal:
    subnet: "192.168.0.0/16"
    monitoring_level: "medium"
    allowed_protocols: ["ALL"]
    
  management:
    subnet: "10.0.0.0/24"
    monitoring_level: "critical"
    allowed_protocols: ["SSH", "HTTPS", "SNMP"]

intrusion_detection:
  engine: "Suricata"
  version: "6.0.13"
  rule_sources:
    - "Emerging Threats"
    - "SecureGuardPro Custom Rules"
    - "Proofpoint ET Pro"
  
  alert_thresholds:
    critical: 1
    high: 3
    medium: 10
    low: 50

network_flows:
  collection_method: "NetFlow v9"
  retention_period: "90 days"
  analysis_tools:
    - "nfcapd"
    - "nfdump"
    - "Custom Python Analytics"

traffic_baselines:
  normal_business_hours: "08:00-18:00 Mon-Fri"
  expected_bandwidth:
    inbound: "500 Mbps"
    outbound: "200 Mbps"
  anomaly_threshold: "300% of baseline"
```

---
